apply plugin: 'java-library'

configure(allprojects) {
    apply plugin: 'java-library'

    repositories {
        mavenCentral()
        maven { url 'https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository'}
        maven { url 'https://jitpack.io'}
    }
}

configure(project(':annotations')) {
    sourceSets.main {
        java.srcDirs = [layout.projectDirectory.dir('src')]
        resources.srcDirs = [layout.projectDirectory.dir('assets')]
    }

    dependencies {
        implementation files("F:\\anuken\\mindustry.jar")
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs.addAll([
                "--add-exports", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
                "--add-exports", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
                "--add-exports", "java.base/sun.reflect.annotation=ALL-UNNAMED"
        ])

        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16
    }
}

sourceSets.main.java.srcDirs = [layout.projectDirectory.dir('src')]

version = '1.0'

ext {
    //windows sucks
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

dependencies {
    annotationProcessor project(':annotations')
    compileOnly project(':annotations')

    compileOnly files("F:\\anuken\\mindustry.jar")
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16

    options.encoding = 'UTF-8'
}

task jarAndroid {
    dependsOn "jar"

    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.");

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f -> new File(f, "android.jar").exists() }

        if (!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect { "--classpath $it.path" }.join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        //dex and desugar files - this requires d8 in your PATH
        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    archiveFileName = "${base.archivesBaseName}Desktop.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.json"
    }

    from("assets/") {
        include "**"
    }
}

task deploy(type: Jar) {
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${base.archivesBaseName}.jar"

    from { [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast {
        delete {
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}